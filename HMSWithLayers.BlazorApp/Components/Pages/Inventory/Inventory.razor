@using HMSWithLayers.Core.Result
@using HMSWithLayers.Application.DTOS
@inject HMSWithLayers.Application.Contracts.IInventoryService inventoryService
@page "/inventory"
@inject NavigationManager navigationManager
@rendermode InteractiveServer



<PageTitle>Inventory</PageTitle>

<h1>Inventory</h1>

  

@if (inventories == null)
{
		<p>Loading</p>
}
else
{
		<table class="table">
			<thead>
				<tr>
					<th>Id</th>
					<th>Name</th>
					<th>Capacity</th>
					<th>Location</th>
					<th>Update</th>
					<th>Delete</th>
				</tr>
			</thead>
			<tbody>
			@foreach (var item in inventories.Value)
			{
					 <tr>
					   <td>@item.Id</td>
					   <td>@item.InventoryName</td>
					   <td>@item.InventoryCapacity</td>
					   <td>@item.InventoryLocation</td>
					   <td><button @onclick="@(() => NavigateToUpdateSpecialization(item.Id))">Update</button></td>
					   <td><button @onclick="@(async () => await OnDelete(item.Id))">Delete</button></td>
					 </tr>
			}
				</tbody>
		</table>
	<div class="nav-item w-auto d-flex align-items-end justify-content-end">
			<NavLink class="nav-link btn btn-primary fw-bold text-light " href="addInventory">
			<span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Add Inventory
		</NavLink>
	</div>
}

@code {
	private Result<List<InventoryResponseDto>> inventories;


	/// <summary>
	/// Method invoked when the component is initialized asynchronously.
	/// </summary>
	/// <returns>A task that represents the asynchronous operation.</returns>
	protected override async Task OnInitializedAsync()
	{
		inventories = await inventoryService.GetAllInventoriesAsync();
	}

	/// <summary>
	/// Method invoked when deleting an inventory item.
	/// </summary>
	/// <param name="id">The ID of the inventory item to delete.</param>
	/// <returns>A task that represents the asynchronous operation.</returns>
	private async Task OnDelete(int id)
	{
		await inventoryService.DeleteInventoryAsync(id);
		await RefreshItems();
	}

	/// <summary>
	/// Refreshes the list of inventory items.
	/// </summary>
	/// <returns>A task that represents the asynchronous operation.</returns>
	private async Task RefreshItems()
	{
		inventories = await inventoryService.GetAllInventoriesAsync();
	}

	/// <summary>
	/// Navigates to the update inventory page for a specific inventory item.
	/// </summary>
	/// <param name="id">The ID of the inventory item to update.</param>
	private void NavigateToUpdateSpecialization(int id)
	{
		navigationManager.NavigateTo($"/updateinventory/{id}");
	}

}
