@using HMSWithLayers.Core.Result
@using HMSWithLayers.Application.DTOS
@inject HMSWithLayers.Application.Contracts.IInventoryService inventoryService
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@page "/addinventory"

<h1>AddInventory</h1>
@if (errorMessage != null)
{
            <div class="alert alert-danger" role="alert">
        @errorMessage
            </div>
}
<EditForm Model="Model" OnValidSubmit="SubmitForm" FormName="Inventory">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>
            Name:
            <InputText @bind-Value="Model!.InventoryName" />
        </label>
    </div>
    <ValidationMessage For="@(() => Model!.InventoryName)" />
    <div>
        <label>
            Location:
            <InputText @bind-Value="Model!.InventoryLocation" />
        </label>
    </div>
    <ValidationMessage For="@(() => Model!.InventoryLocation)" /><div>
        <label>
            Capacity:
            <InputNumber @bind-Value="Model!.InventoryCapacity" />
        </label>
    </div>
    <ValidationMessage For="@(() => Model!.InventoryCapacity)" />

    <div>
        <button type="submit">Submit</button>
    </div>
</EditForm>


@code {
    [SupplyParameterFromForm]
    private InventoryRequestDto? Model { get; set; } = new InventoryRequestDto();
    private string errorMessage;

    /// <summary>
    /// Submits the form data for adding a new inventory.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task SubmitForm()
    {
        try
        {
            Result result = await inventoryService.AddInventoryAsync(Model);
            if (result.IsSuccess)
            {
                navigationManager.NavigateTo("/inventory");
            }
            else
            {
                errorMessage = "An error occurred";
            }
        }
        catch (Exception e)
        {
            errorMessage = "An error occurred " + e.Message;

        }
    }


}
